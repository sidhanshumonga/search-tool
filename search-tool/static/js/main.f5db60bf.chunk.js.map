{"version":3,"sources":["logo.svg","components/Photos-grid/Photos-grid.js","components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PhotosGrid","className","this","props","photos","length","map","i","src","farm","server","id","secret","alt","title","split","width","height","Component","Loader","xmlns","version","in","stdDeviation","result","mode","values","React","App","fetchPhotos","_","debounce","value","axios","get","then","response","setState","data","photo","loading","handleChange","e","target","_handleKeyDown","key","preventDefault","console","log","state","Row","Col","Form","Control","placeholder","onChange","onKeyDown","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kLAAAA,EAAOC,QAAU,IAA0B,kC,6LCEtBC,E,iLAEb,OACI,yBAAKC,UAAU,cACmB,IAA7BC,KAAKC,MAAMC,OAAOC,OAAe,8CAA0BH,KAAKC,MAAMC,OAAOE,KAAI,SAACC,GAAD,OAAO,qCAAKN,UAAU,cAAcO,IAAK,eAAiBD,EAAEE,KAAO,qBAAuBF,EAAEG,OAAS,IAAMH,EAAEI,GAAK,IAAMJ,EAAEK,OAAS,SAAUC,IAAKN,EAAEO,MAAMC,MAAM,KAAK,GAAIC,MAAM,QAAQC,OAAO,SAAvL,YAAyM,gB,GAJ1QC,a,0CCCnBC,G,uLAEb,OACI,yBAAKlB,UAAU,aACX,yBAAKA,UAAU,cACf,yBAAKA,UAAU,cACf,yBAAKA,UAAU,cACf,yBAAKmB,MAAM,6BAA6BC,QAAQ,OAC5C,8BACI,4BAAQV,GAAG,OACP,oCAAgBW,GAAG,gBAAgBC,aAAa,KAAKC,OAAO,SAC5D,mCAAeF,GAAG,OAAOG,KAAK,SAASC,OAAO,yD,GAXtCC,IAAMT,YC8D3BU,E,YAtDb,aAAe,IAAD,8BACZ,+CAKFC,YAAcC,IAAEC,UAAS,SAACC,GACxBC,IAAMC,IAAI,mHAAqHF,EAAQ,iCACpIG,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEjC,OAAO,YAAKgC,EAASE,KAAKlC,OAAOmC,OAAQC,SAAS,SAErE,KAXW,EAadC,aAAe,SAACC,GACd,EAAKL,SAAS,CAAEL,MAAOU,EAAEC,OAAOX,QAC5BU,EAAEC,OAAOX,OACX,EAAKK,SAAS,CAACG,SAAS,IACxB,EAAKX,YAAYa,EAAEC,OAAOX,QAG1B,EAAKK,SAAS,CAAEjC,OAAQ,GAAIoC,SAAS,KApB3B,EAwBdI,eAAiB,SAACF,GACF,UAAVA,EAAEG,MACJH,EAAEI,iBACFC,QAAQC,IAAIN,GACZ,EAAKD,aAAaC,KA1BpB,EAAKO,MAAQ,CAAEjB,MAAO,GAAI5B,OAAQ,GAAIoC,SAAS,GAFnC,E,sEAiCZ,OACE,yBAAKvC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACiD,EAAA,EAAD,CAAKjD,UAAU,cACb,kBAACkD,EAAA,EAAD,KACE,wBAAIlD,UAAU,QAAd,iBACA,kBAACmD,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,QAAN,CAAcpD,UAAU,eAAeqD,YAAY,mBAAmBtB,MAAO9B,KAAK+C,MAAMjB,MAAOuB,SAAUrD,KAAKuC,aAAce,UAAWtD,KAAK0C,qBAKpJ,0BAAM3C,UAAU,iBACZC,KAAK+C,MAAMT,QAAU,kBAAC,EAAD,CAAQvC,UAAU,eAAyB,kBAAC,EAAD,CAAYG,OAAQF,KAAK+C,MAAM7C,e,GAhDzFuB,IAAMT,WCGJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.f5db60bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nexport default class PhotosGrid extends Component {\n    render() {\n        return (\n            <div className=\"PhotosGrid\">\n                {this.props.photos.length === 0 ? <h2>No photo found</h2> : this.props.photos.map((i) => <img className=\"mx-2 photos\" src={'https://farm' + i.farm + '.staticflickr.com/' + i.server + '/' + i.id + '_' + i.secret + '_z.jpg'} alt={i.title.split(' ')[0]} width=\"220px\" height=\"220px\" className=\"m-2\" />)}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './Loader.css'\n\nexport default class Loader extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"dot dot-1\"></div>\n                <div className=\"dot dot-2\"></div>\n                <div className=\"dot dot-3\"></div>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n                    <defs>\n                        <filter id=\"goo\">\n                            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" result=\"blur\" />\n                            <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 21 -7\" />\n                        </filter>\n                    </defs>\n                </svg>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap'\nimport './App.css';\nimport PhotosGrid from './components/Photos-grid/Photos-grid'\nimport { logo } from './logo.svg'\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Loader from './components/Loader/Loader'\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = { value: '', photos: [], loading: false }\n    // this.handleChange = _.debounce(this.handleChange, 500);\n  }\n\n  fetchPhotos = _.debounce((value) => {\n    axios.get('https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=3b8da0e5c9ae44b2d9c8f009a21f8929&text=' + value + '&format=json&nojsoncallback=1')\n      .then(response => {\n        this.setState({ photos: [...response.data.photos.photo], loading: false })\n      });\n  }, 2000)\n\n  handleChange = (e) => {\n    this.setState({ value: e.target.value });\n    if (e.target.value) {\n      this.setState({loading: true});\n      this.fetchPhotos(e.target.value);\n    }\n    else {\n      this.setState({ photos: [], loading: false });\n    }\n  }\n\n  _handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      console.log(e);\n      this.handleChange(e);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Row className=\"search-row\">\n            <Col>\n              <h3 className=\"my-3\">Search Photos</h3>\n              <Form>\n                <Form.Control className=\"search-input\" placeholder=\"Search images...\" value={this.state.value} onChange={this.handleChange} onKeyDown={this._handleKeyDown} />\n              </Form>\n            </Col>\n          </Row>\n        </header>\n        <body className=\"App-body mt-3\">\n          { this.state.loading ? <Loader className=\"loader-div\"></Loader> : <PhotosGrid photos={this.state.photos}></PhotosGrid>}\n          \n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}