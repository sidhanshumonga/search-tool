{"version":3,"sources":["components/Photos-grid/loading.gif","components/photo-modal/Photo-modal.js","components/Photos-grid/Photos-grid.js","components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PhotoModal","Modal","this","props","size","aria-labelledby","centered","Header","closeButton","Title","id","photo","title","Body","className","src","farm","server","secret","alt","split","Component","PhotosGrid","setModalShow","v","setState","modalShow","selected","state","photos","length","map","i","key","width","height","onClick","loading","page","require","show","onHide","Loader","xmlns","version","in","stdDeviation","result","mode","values","React","initialState","value","apiPageCount","totalPages","scrolled","App","fetchPhotos","_","debounce","flag","axios","get","then","response","data","pages","saveToStorage","recover","handleChange","e","target","updateSearch","_handleKeyDown","preventDefault","isInViewport","offset","elements","document","getElementsByClassName","element","top","getBoundingClientRect","window","innerHeight","handleScroll","event","JSON","parse","localStorage","getItem","history","reverse","splice","includes","push","setItem","stringify","clearStroage","clear","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","Row","Col","Form","Control","placeholder","onChange","onKeyDown","x","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c91bb2c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.4c140210.gif\";","import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport './Photo-modal.css'\n\nexport default class PhotoModal extends Component {\n    render() {\n        return (\n            <Modal\n                {...this.props}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        {this.props.photo ? this.props.photo.title : null}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"text-center\">\n                    {this.props.photo ? <img src={'https://farm' + this.props.photo.farm + '.staticflickr.com/' + this.props.photo.server + '/' + this.props.photo.id + '_' + this.props.photo.secret + '_z.jpg'} alt={this.props.photo.title.split(' ')[0]} /> : null}\n                </Modal.Body>\n            </Modal>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './Photos-grid.css'\nimport PhotoModal from '../photo-modal/Photo-modal'\n\nexport default class PhotosGrid extends Component {\n    constructor() {\n        super();\n        this.state = { modalShow: false, setModalShow: false, selected: null }\n    }\n    // method to show and hide modal\n    setModalShow = (v, photo) => {\n        this.setState({ modalShow: v, selected: photo });\n    }\n\n    render() {\n        return (\n            <div className=\"PhotosGrid\">\n                {this.props.photos.length === 0 ? <h2>No photo found</h2> : this.props.photos.map((i) => <img key={i.id} className=\"m-2 photos\" src={'https://farm' + i.farm + '.staticflickr.com/' + i.server + '/' + i.id + '_' + i.secret + '_z.jpg'} alt={i.title.split(' ')[0]} width=\"220px\" height=\"220px\" onClick={() => this.setModalShow(true, i)} />)}\n                {/* Loading image to show on scroll */}\n                {this.props.loading && this.props.page > 1 ? <img src={require('./loading.gif')} className='inline' width=\"420px\" height=\"220px\" /> : null}\n                <PhotoModal\n                    show={this.state.modalShow}\n                    photo={this.state.selected}\n                    onHide={() => this.setModalShow(false)}\n                />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './Loader.css'\n\nexport default class Loader extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"dot dot-1\"></div>\n                <div className=\"dot dot-2\"></div>\n                <div className=\"dot dot-3\"></div>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n                    <defs>\n                        <filter id=\"goo\">\n                            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" result=\"blur\" />\n                            <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 21 -7\" />\n                        </filter>\n                    </defs>\n                </svg>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Form, Row, Col } from 'react-bootstrap'\nimport './App.css';\nimport PhotosGrid from './components/Photos-grid/Photos-grid'\nimport axios from 'axios';\nimport _ from 'lodash';\nimport Loader from './components/Loader/Loader'\n\nconst initialState = { value: '', photos: [], loading: false, apiPageCount: 1, totalPages: 1, scrolled: false };\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { ...initialState, history: [] }\n  }\n\n  // method to fetch photos from flickr API\n  // parameters used : { text to search, pagecount }\n  // debounce : to avoid multiple calls to API at same time\n  fetchPhotos = _.debounce((flag) => {\n    axios.get('https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=3b8da0e5c9ae44b2d9c8f009a21f8929&text=' + this.state.value + '&format=json&safe_search=3&nojsoncallback=1&page=' + this.state.apiPageCount)\n      .then(response => {\n        if (response.data.photos) {\n          // flag ensures that whether method is called from onscroll listener or input change\n          // flag true : will replace the photos variable in state\n          // flag false : will add next page photos to same array\n          this.setState({ photos: flag ? [...response.data.photos.photo] : [...this.state.photos, ...response.data.photos.photo], loading: false, totalPages: response.data.photos.pages, scrolled: false }) //scroll false ensures API is called once!\n          //saving a tag in localStorage as history if searched once!\n          if (flag && this.state.value.length > 2) { this.saveToStorage(); this.recover(); }\n        }\n      });\n  }, 1000);\n\n  // method to handle user input from search field\n  // parameters used : { event }\n  handleChange = (e) => {\n    this.setState({ value: e.target.value });\n    if (e.target.value) {\n      // loading true: shows loader\n      this.setState({ loading: true });\n      // calls method to fetch data\n      this.fetchPhotos(true);\n    }\n    else {\n      // if value becomes empty: state resets to Initial State\n      this.setState(initialState);\n    }\n  }\n\n  // method to handle search from tags/history\n  // parameters used : { text value of tag }\n  updateSearch = (value) => {\n    this.setState({ value: value, loading: true });\n    this.fetchPhotos(true);\n  }\n\n  // method to handle enter key on search\n  // parameters used : { event }\n  _handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      // preventing page from reloading\n      e.preventDefault();\n      this.handleChange(e);\n    }\n  }\n\n  // method to check whether last image is in viewport on scroll\n  // parameters used : { offset value = 0 }\n  isInViewport = (offset = 0) => {\n    // getting all elements in document: class photos\n    let elements = document.getElementsByClassName('photos');\n    // getting last element in photos array\n    let element = elements[elements.length - 1];\n    if (!element) return false;\n    const top = element.getBoundingClientRect().top;\n    return (top + offset) >= 0 && (top - offset) <= window.innerHeight; //returns boolean\n  }\n\n  // method to handle scroll event\n  // parameters used : { event }\n  handleScroll = (event) => {\n    // checks whether element is in viewport & apiPageCount is less or equal to total number of pages\n    if (this.isInViewport() && this.state.apiPageCount <= this.state.totalPages && !this.state.scrolled) {\n      this.setState({ apiPageCount: this.state.apiPageCount + 1, loading: true, scrolled: true });\n      this.fetchPhotos();\n      return;\n    }\n  }\n\n  // method to restore tags from localstorage\n  recover = () => {\n    //parse the localstorage value\n    let data = JSON.parse(localStorage.getItem('history'));\n    if (data) {\n      // saving last 5 searches\n      this.setState({ history: data.length > 5 ? data.reverse().splice(0, 5) : data.reverse() });\n    }\n  }\n\n  // method to save tags/searches to localstorage\n  saveToStorage = () => {\n    //local storage only takes in key value pair so you would have to serialize it.\n    let history = this.state.history ? [...this.state.history] : [];\n\n    if (!history.includes(this.state.value)) { history.push(this.state.value); }\n\n    localStorage.setItem('history', JSON.stringify(history));\n  }\n\n  // method to clear history (localstorage and state both)\n  clearStroage = () => {\n    localStorage.clear();\n    this.setState({ history: [], value: '', photos: [] });\n  }\n\n\n  componentDidMount = () => {\n    window.addEventListener('scroll', this.handleScroll);\n    this.recover();\n  }\n\n  componentWillUnmount = () => {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Row className=\"search-row\">\n            <Col>\n              <h3 className=\"my-3\">Search Photos</h3>\n              <Form>\n                <Form.Control className=\"search-input\" placeholder=\"Search images...\" value={this.state.value} onChange={this.handleChange} onKeyDown={this._handleKeyDown} />\n              </Form>\n              {this.state.history.length > 0 ? <div className=\"pt-2\">\n                <h6 className=\"p-head\">Previous Search: </h6>\n                {this.state.history.map((x) => <p key={x} className=\"p-tags mx-1\" onClick={() => this.updateSearch(x)}>{x}</p>)}\n                <i className=\"material-icons clear-tags m-2\" onClick={() => this.clearStroage()}>close</i>\n              </div> : null}\n            </Col>\n          </Row>\n        </header>\n        <div className=\"App-body mt-3\">\n          <PhotosGrid photos={this.state.photos} loading={this.state.loading} page={this.state.apiPageCount}></PhotosGrid>\n          {this.state.loading ? <Loader className=\"loader-div\"></Loader> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}